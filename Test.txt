Question Number.1)Program to perform simple CRUD operation using String array
Array name should be places. 

import java.util.Arrays; 
 class NewRestaurant{

    static String name = "7 Season";
    static String foodItems[] = {null , null , null , null , null , null ,null};
    static String ownerName = "Rahulla & team";
    static String address = "Marathahalli";
    static int index;
         
	//CRUD	 
	//method 
	public static boolean addFoodItems(String foodItem){
       // "Akki Rotti" != null
	    System.out.println("inside addFoodItems():");
        System.out.println();
		boolean isAdded = false;
		if(foodItem != null){
		//code
		     // foodItems[0] = "Akki Rotti";
			    foodItems[index++] = foodItem;
				
				
					isAdded = true;
					System.out.println("Food Item added Successfully...");
					}
					else
					{
					System.out.println("Food Item can't be null");
					
					}
					System.out.println("End of addFoodItems():");
				  return isAdded;
           	}
		
		//fetch data 
    public static void getFoodItems(){
    for(int index = 0; index < foodItems.length; index++){
           System.out.println(foodItems[index]);

	}

  
  }	
  
  public static boolean updateFoodItem(String newFoodItem , String oldFoodItem){
	  
	         boolean isUpdated = false;
		for(int pos=0 ; pos < foodItems.length ; pos++){

            //if			
			  // "Roti" == "Roti"
			   if(foodItems[pos] == oldFoodItem){
				  foodItems[0] = "Lemon Chicken";

                       isUpdated = true ;
			   
			   }
         
     
  }	
   return isUpdated ;
}


 
  public static void deleteFoodItem(String foodItem){
 
  //looping the food item from array(foodItem)
  int newIndex , oldIndex ;
  for( newIndex=0 , oldIndex=0 ; oldIndex < foodItems.length ; oldIndex++){
	  
	    if(foodItems[oldIndex] != foodItem){
			
			  foodItems[newIndex++] =  foodItems[oldIndex];
			  
	  }
		
    }
      System.out.println(newIndex);			

	  
        foodItems = Arrays.copyOf(foodItems , newIndex);
     
      return;

 }	  

}



class NewRestaurantTester{
               public static void main(String foodItems1[]){
				 
				 
				//Invoking a method
				//Create
				
                NewRestaurant.addFoodItems("Roti");
				NewRestaurant.addFoodItems("Curd Rice");
				NewRestaurant.addFoodItems("Veg Pakoda");
				NewRestaurant.addFoodItems("Veg Fry Rice");
				NewRestaurant.addFoodItems("South Indian Thaali");
				NewRestaurant.addFoodItems("Bellulli Kabab");
				NewRestaurant.addFoodItems("Veg Biryani");
           
             //Read
			 NewRestaurant.getFoodItems();
			 
			 boolean isUpdated = NewRestaurant.updateFoodItem("Lemon Chicken" , "Roti");
		     System.out.println(isUpdated);	
			 NewRestaurant.getFoodItems();

			 
			NewRestaurant.deleteFoodItem("Lemon Chicken");
			NewRestaurant.getFoodItems(); 
			
  
			}
			 
			 
      }			 
				



Question Number.2)Keywords are there 50+3, some keywords are:- 	
abstract:-A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects 
(to access it,it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body.
 The body is provided by the subclass (inherited from).
assert:-For debugging.
boolean:-A data type that can only store true or false values.
break:-	Breaks out of a loop or a switch block.
byte:-	A data type that can store whole numbers from -128 and 127.
case:-	Marks a block of code in switch statements.
catch:-	Catches exceptions generated by try statements.
char:-	A data type that is used to store a single character
class:-	Defines a class
continue:- Continues to the next iteration of a loop.







Question No.4)Variable:-A variable is the name of a reserved area allocated in memory. In other words, it is a name of the memory location.
It is a combination of "vary + able" which means its value can be changed.  
variable is a container which is holds the data while the java programm is executed.
  There are 4 types of variable in java,they are
    1.Local Variable
	2.Instance Variable
	3.Static Variable
	4.Parameter Variable
	
	1) Local Variable:-
     A variable declared inside the body of the method is called local variable. 
	 You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.
	 A local variable cannot be defined with "static" keyword.

    2) Instance Variable:-
     A variable declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static.
     It is called an instance variable because its value is instance-specific and is not shared among instances.

    3) Static variable:-
     A variable that is declared as static is called a static variable. It cannot be local. You can create a single copy of the static variable and share it among all the instances of the class. Memory allocation for static variables happens only once when the class is loaded in the memory.

    4) Parameter Variable:-A parameter is the variable listed inside the parentheses in the function definition. 
	 An argument is the value that are sent to the function when it is called parameter Variable.

    Example to understand the types of variables in java
	class A{ 																						 
 
    static int m=100;//static variable  
    void method() 
    {   
	    int a=(12,8);// parameter variable
        int n=90;//local variable    
    }  
    public static void main(String args[])  
    {  
        int data=50;//instance variable    
    }  
    }//end of class   


Question Number.5) The differences between Primitive data types and Non-primitive types are listed below,they are:-  
	Primitive data types:-	                                                
	1.Primitive data type is a kind of data types that stores the data of only one type.  
	2.Examples of primitive data structure are integer, character, float,double,byte,boolean.
	3.Primitive data types will contain some value, i.e., it cannot be NULL.	
	4.It starts with a lowercase character.
	5.Primitive data types can be used to call the methods.
 
 
	Non-primitive data types:-
	 1.Non-primitive data type is a type of data types that can store the data of more than one type.
	 2.Examples of non-primitive data types are  String,Array,Interface
     3.Non-primitive data types can consist of a NULL value.In case of non-primitive data types, size is not fixed.
	 4.It starts with an uppercase character.
     5.Non-primitive data structure cannot be used to call the method.

Question Number.6)
      1.Identifier:- The name given in java is called "Identifier".
	  2.Keyword:-keywords are pre defineds/special words/buit in words/reserved words with specific meaning.
      3.LItarals:-The values in java are called "Litarals".
      4.Array:- Array is a container which is used store mutliple values of similar data types. 	  
	    There are two types of array are:-
		1.Single Dimensional Array
		2.Multi Dimensional Array
	  5.Method:- A method is a block of code or collection of statements or a set of code grouped together to perform a certain task or operation.
	  It is used to achieve the reusability of code. We write a method once and use it many times. We do not require to write code again and 
	  again. It also provides the easy modification and readability of code, just by adding or removing a chunk of code. 
	  The method is executed only when we call or invoke it.  
	  
Question Number.7)
Method Overloading:-in java,two or more methods have same class but different in parameters
i.e.,1.Types of parameter.
	 2.Number of parameters. 
	In this example, we are creating static methods so that we don't need to create instance for calling methods.

 class Adder{  
 static int add(int a,int b){return a+b;}  
 static int add(int a,int b,int c){return a+b+c;}  
 }  
 class TestOverloading1{  
 public static void main(String[] args){  
 System.out.println(Adder.add(11,11));  
 System.out.println(Adder.add(11,11,11));  
 }
 
 }  

Test it Now
Output:

22
33

Question Number.8)
Java Simple for Loop
A simple for loop in java. We can initialize the variable, check condition and increment/decrement value. 
It consists of four parts:-
Initialization:- It is the initial condition which is executed once when the loop starts. Here, we can initialize the variable, or we can use an already initialized variable. It is an optional condition.
Condition:- It is the second condition which is executed each time to test the condition of the loop. It continues execution until the condition is false. It must return boolean value either true or false. It is an optional condition.
Increment/Decrement:- It increments or decrements the variable value. It is an optional condition.
Statement:- The statement of the loop is executed each time until the second condition is false.

	Syntax:
	for(initialization; condition; increment/decrement){    
	//statement or code to be executed    
	}    




Example:

ForExample.java

//Java Program to demonstrate the example of for loop  
//which prints table of 1  
public class ForExample {  
public static void main(String[] args) {  
    //Code of Java for loop  
    for(int i=1;i<=10;i++){  
        System.out.println(i);  
    }  
}  
}  
Test it Now
Output:

1
2
3
4
5
6
7
8
9
10


Question Number.10)Java main() method:-
The main() is the starting point for JVM to start execution of a Java program. Without the main() method, JVM will not execute the program. 

*The syntax of the main() method is:-
Public static void main (String args [])

public = Access Specifier.
static = Keyword.
Void = Return Type.
main = Method Name.
args[] = Array of String Type.

public: It is an access specifier. We should use a public keyword before the main() method so that JVM can identify the execution point of the program. 
If we use private, protected, and default before the main() method, it will not be visible to JVM.

static: You can make a method static by using the keyword static. We should call the main() method without creating an object.
 Static methods are the method which invokes without creating the objects, so we do not need any object to call the main() method.

void: In Java, every method has the return type. Void keyword acknowledges the compiler that main() method does not return any value.

main(): It is a default signature which is predefined in the JVM. It is called by JVM to execute a program line by line and end the execution after completion of this method. 
We can also overload the main() method.

String args[]: The main() method also accepts some data from the user. It accepts a group of strings, which is called a string array. 
It is used to hold the command line arguments in the form of string values.

main(String args[])  
Here, agrs[] is the array name, and it is of String type. It means that it can store a group of string. Remember, 
this array can also store a group of numbers but in the form of string only. Values passed to the main() method is called arguments. 
These arguments are stored into args[] array, so the name args[] is generally used for it.

 

Public static void main (String args [])
1.The public keyword is an access specifies, which allows the programmer to control the visibility of class members. 
When a class member is preceded by public, then that member may be accessed by code outside the class in which it is declared. 
In this case, main ( ) must be declared as public.
2.The keyword static allows main ( ) to be called without having to instantiate a particular instance of the class.
This is necessary since main ( ) is called by the Java interpreter before any objects are made.
3.The keyword void simply tells the compiler that main ( ) does not return a value.
4.Main ( ) is the method, called when a Java application begins.
5.String args [ ] declares a parameter named args, which is an array of instances of the class String. In this case,
args receives any command-line arguments present when the program is executed.
7.With the same name as args we can't define one more variable we will get.
8.public static void main (String [] p) p is a variable which is defined as a identifier.
